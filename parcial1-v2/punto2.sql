/*
JUAN SEBASTIAN HENAO
RECUPERACION PARCIAL 1

PUNTO 2: 
- Dada el nombre de una pelicula, obtener top recomendaciones de peliculas similares.
  Ordenadas por promedio de ranking y mayor cantidad de votaciones.
  Ademas la fecha de creacion de las peliculas recomendadas deben estar en un rango +-5 aÃ±os respecto a la pelicula a buscar.
*/

CREATE OR REPLACE PROCEDURE JUHE_PUNTO2_INSERT_MOVIE_RANK(
    S_TITLE IN MOVIES.TITLE%TYPE,
    S_TAG IN TAGS."TAG"%TYPE,
    N_AVG IN RATINGS.RATING%TYPE
) AS

N_TOTAL_COUNT NUMBER := 0;

BEGIN

    SELECT COUNT(*)
    INTO N_TOTAL_COUNT
    FROM TEMPORAL
    WHERE TEMPORAL.ID_1=S_TITLE;
    
    IF N_TOTAL_COUNT > 0 THEN
        -- UPDATE THE TAGS VALUE, BY APPENDING THE NEW TAG VALUE
        UPDATE TEMPORAL
        SET VALUE_1 = S_TAG
        WHERE ID_1=S_TITLE;
    ELSE
        -- INSERT THE VALUE IF NOT EXISTS
        INSERT INTO TEMPORAL(ID_1, VALUE_1, VALUE_2)
        VALUES (S_TITLE, S_TAG, N_AVG);
    END IF;
    

END JUHE_PUNTO2_INSERT_MOVIE_RANK;


CREATE OR REPLACE PROCEDURE JUHE_PUNTO2_TITLE_OFFSET(
    S_MOVIE_TITLE IN MOVIES.TITLE%TYPE,
    S_MOVIE_TITLE_B IN MOVIES.TITLE%TYPE,
    N_YEARS_OFFSET IN NUMBER,
    B_RES IN OUT BOOLEAN
) AS 

N_MOVIE_YEAR NUMBER := 0;
N_MOVIE_YEAR_2 NUMBER := 0;

BEGIN 

N_MOVIE_YEAR := TO_NUMBER(REGEXP_SUBSTR(S_MOVIE_TITLE, '\d{4}'));
N_MOVIE_YEAR_2 := TO_NUMBER(REGEXP_SUBSTR(S_MOVIE_TITLE_B, '\d{4}'));

B_RES := N_MOVIE_YEAR_2 <= N_MOVIE_YEAR + N_YEARS_OFFSET AND N_MOVIE_YEAR_2 >= N_MOVIE_YEAR - N_YEARS_OFFSET;

END JUHE_PUNTO2_TITLE_OFFSET;


CREATE OR REPLACE PROCEDURE JUHE_PUNTO2_SIMILAR_TOP_AVG(
    S_MOVIE_TITLE IN MOVIES.TITLE%TYPE,
    S_TAG IN TAGS."TAG"%TYPE
) AS

CURSOR C_SIMILARS IS SELECT MOVIES.TITLE AS MOVIE_TITLE, TAGS."TAG" AS "TAG", ROUND(AVG(RATINGS.RATING), 2) as AVERAGE
                        FROM RATINGS
                        INNER JOIN MOVIES ON
                        MOVIES.MOVIE_ID=RATINGS.MOVIE_ID
                        INNER JOIN TAGS ON
                        TAGS.MOVIE_ID=RATINGS.MOVIE_ID
                        WHERE TAGS."TAG" LIKE '%'||'scifi'||'%' AND MOVIES.TITLE NOT LIKE '%'||S_MOVIE_TITLE||'%'
                        GROUP BY MOVIES.TITLE, TAGS."TAG"
                        ORDER BY AVERAGE DESC
                        FETCH FIRST 30 ROWS ONLY;

B_BETWEEN_OFFSET BOOLEAN := FALSE;

BEGIN

    FOR I IN C_SIMILARS LOOP
        JUHE_PUNTO2_TITLE_OFFSET(S_MOVIE_TITLE, I.MOVIE_TITLE, 5, B_BETWEEN_OFFSET);
    
        IF B_BETWEEN_OFFSET THEN 
            JUHE_PUNTO2_INSERT_MOVIE_RANK(I.MOVIE_TITLE, I."TAG", I.AVERAGE);
        END IF;
    
    END LOOP;

END JUHE_PUNTO2_SIMILAR_TOP_AVG;

CREATE OR REPLACE PROCEDURE JUHE_PUNTO2(
    S_TITLE IN MOVIES.TITLE%TYPE
) AS 

CURSOR C_TITLES IS SELECT MOVIES.TITLE AS MOVIE_TITLE, TAGS."TAG" AS "TAG"
                    FROM MOVIES
                    INNER JOIN TAGS ON
                    TAGS.MOVIE_ID=MOVIES.MOVIE_ID
                    WHERE LOWER(MOVIES.TITLE) LIKE LOWER(S_TITLE)||'%'
                    GROUP BY MOVIES.TITLE, TAGS."TAG"
                    ORDER BY COUNT(*) DESC
                    FETCH FIRST 30 ROWS ONLY;

BEGIN

DELETE FROM TEMPORAL;

FOR I IN C_TITLES LOOP

    JUHE_PUNTO2_SIMILAR_TOP_AVG(I.MOVIE_TITLE, I."TAG");

END LOOP;

END JUHE_PUNTO2;

-- EXAMPLE EXECUTION
DECLARE
v_start_time NUMBER;
v_elapsed_time NUMBER;
N_AVERAGE NUMBER;
BEGIN
v_start_time := DBMS_UTILITY.GET_TIME;

JUHE_PUNTO2('interstellar');

v_elapsed_time := DBMS_UTILITY.GET_TIME - v_start_time;
DBMS_OUTPUT.PUT_LINE('Elapsed time: ' || v_elapsed_time);

END;

SELECT ID_1 AS TITLE, VALUE_1 AS "LAST_TAG", VALUE_2 AS AVERAGE
FROM TEMPORAL
ORDER BY AVERAGE DESC
FETCH FIRST 50 ROWS ONLY;